import numpy as np 

x = np.array(([2,9],[1,5],[3,6]),dtype=float)
y = np.array(([92],[86],[89]),dtype=float)

x = x/np.amax(x,axis=0)
y = y/100

def sigmoid(x):
    return 1/(1+np.exp(-x))
              
def derivatives_sigmoid(x):
    return x*(1-x)

epoch = 900
lr = 1.5

inputlayer_neuron = 2
hiddenlayer_neuron = 3
output_neuron = 1
wh = np.random.uniform(size =(inputlayer_neuron,hiddenlayer_neuron))
bh = np.random.uniform(size =(1,hiddenlayer_neuron))
wout = np.random.uniform(size =(hiddenlayer_neuron,output_neuron))
bout = np.random.uniform(size =(1,output_neuron))

for i in range(epoch):
    hinp1 = np.dot(x,wh)
    hinp = hinp1 + bh
    hlayer_act  = sigmoid(hinp)
    outinp1 = np.dot(hlayer_act,wout)
    outinp = outinp1 + bout
    output = sigmoid(outinp)
    EO = y-output
    outgrad = derivatives_sigmoid(output)
    
    d_output = EO*outgrad
    EH = d_output.dot(wout.T)
    hiddengrad = derivatives_sigmoid(hlayer_act)
    

d_hiddenlayer =EH * hiddengrad

wout += hlayer_act.T.dot(d_output)*lr
bout += np.sum(d_output,axis=0,keepdims=True)*lr
wh += x.T.dot(d_hiddenlayer)*lr
bh += np.sum(d_hiddenlayer,axis = 0, keepdims = True)*lr
print("input: \n " + str(x))
print("Actual Output : \n" + str(y))
print("Predicted output: \n",output)