import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

df = pd.read_csv('Downloads/Social_Network_Ads.csv')

X = df.iloc[:, [2,3]]
y = df.iloc[:, 4]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

print("Training data : ", X_train.shape)
print("Testing data : ", X_test.shape)

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.fit_transform(X_test)

from sklearn.svm import SVC
classifier = SVC(kernel='linear', random_state=0)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)

from sklearn import metrics
print("Accuracy Score : with linear kernel")
print(metrics.accuracy_score(y_test, y_pred))


classifier = SVC(kernel='rbf')
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)
print("Accuracy Score : with default rbf kernel")
print(metrics.accuracy_score(y_test, y_pred))

classifier = SVC(kernel='rbf', gamma=15, C=7, random_state=0)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)
print("Accuracy Score On test data : with default rbf kernel")
print(metrics.accuracy_score(y_test, y_pred))

svc = SVC(kernel='poly', degree=4)
svc.fit(X_train, y_train)
y_pred = svc.predict(X_test)
print("Accuracy Score : with poly kernel and degree")
print(metrics.accuracy_score(y_test, y_pred))

import matplotlib.pyplot as plt
plt.scatter(X_train[:, 0], X_train[:, 1], c=y_train)
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.title('Training Data')
plt.show()

plt.scatter(X_test[:, 0], X_test[:, 1], c=y_test)
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.title('Test Data')
plt.show()

classifier = SVC(kernel='linear', random_state=0)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)

plt.scatter(X_test[:, 0], X_test[:, 1], c=y_test)
plt.scatter(X_train[:, 0], X_train[:, 1], c=y_train)

w = classifier.coef_[0]
a = -w[0]/w[1]
xx = np.linspace(-2.5, 2.5)
yy = a * xx -(classifier.intercept_[0])/w[1]

plt.plot(xx,yy)
plt.axis("off")
plt.show();